Description:
  Ubuntu 18.04 server. Used to create a Letsencrypt certificate for a valid NO-IP hostname. Certificate chain and keys can be downloaded from https://hostname/cert. Fill in NO-IP username, password and valid hostname.

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: AA-TEST

  KeyPairName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: AA-TEST

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.30.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.30.11.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 172.30.12.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 172.30.21.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 172.30.22.0/24

  InboundSourceNetAllowed1:
    Description: Please enter the IP range (CIDR notation) for source network allowed to access resources
    Type: String
    Default: 0.0.0.0/0

  InboundSourceNetAllowed2:
    Description: Please enter the IP range (CIDR notation) for source network allowed to access resources
    Type: String
    Default: 0.0.0.0/0

  Username:
    Description: NO-IP username
    Type: String
    Default: aarato73

  Password:
    Description: NO-IP password
    Type: String
    Default: password

  Hostname:
    Description: NO-IP hostname for dynamic DNS updates
    Type: String
    Default: certificate3.ddns.net


  InstanceType:
    Description: AWS Linux EC2 instance type
    Type: String
    Default: t2.medium
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge,
      t3.nano, t3.micro, t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge,
      m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge,
      m5.large, m5.xlarge, m5.2xlarge, m5.4xlarge,
      c5.large, c5.xlarge, c5.2xlarge, c5.4xlarge, c5.9xlarge,
      g3.8xlarge,
      r5.large, r5.xlarge, r5.2xlarge, r5.4xlarge, r3.12xlarge,
      i3.xlarge, i3.2xlarge, i3.4xlarge, i3.8xlarge,
      d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge]

Mappings: 
  RegionMap: 
    ap-east-1: 
      AMI: ami-e0ff8491 
    ap-northeast-1: 
      AMI: ami-0cb1c8cab7f5249b6 
    ap-south-1: 
      AMI: ami-0cf8402efdb171312 
    ap-southeast-1: 
      AMI: ami-099d318f80eab7e94 
    ca-central-1: 
      AMI: ami-0bc1dd4eb012a451e 
    eu-central-1: 
      AMI: ami-0cdab515472ca0bac 
    eu-north-1: 
      AMI: ami-c37bf0bd 
    eu-west-1: 
      AMI: ami-01cca82393e531118 
    me-south-1: 
      AMI: ami-0383ae5adb5262e3e 
    sa-east-1: 
      AMI: ami-094c359b4d8c6a8ca 
    us-east-1: 
      AMI: ami-064a0193585662d74 
    us-west-1: 
      AMI: ami-056d04da775d124d7 
    us-gov-west-1: 
      AMI: ami-60501e01 
    us-gov-east-1: 
      AMI: ami-cce606bd 
    ap-northeast-2: 
      AMI: ami-081626bfb3fbc9f49 
    ap-southeast-2: 
      AMI: ami-08a648fb5cc86fb74 
    eu-west-2: 
      AMI: ami-0a7c91b6616d113b1 
    us-east-2: 
      AMI: ami-021b7b04f1ac696c2 
    us-west-2: 
      AMI: ami-09a3d8a7177216dcf 
    ap-northeast-3: 
      AMI: ami-09c2595cb5921d41f 
    eu-west-3: 
      AMI: ami-033e0056c336ecff0 



Resources:
#############################################################################################
### NETWORK
#############################################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
          Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 
            Ref: EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 
            Ref: EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
          Ref: InternetGateway
      VpcId: 
        Ref: VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Public1-AZ1-SN

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Public2-AZ2-SN

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PrivateSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Private1-AZ1-SN

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Private2-AZ2-SN

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
          Ref: VPC
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Public-RT

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
          Ref: VPC
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Private-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: 
          Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
          Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PublicRouteTable
      SubnetId: 
          Ref: PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PublicRouteTable
      SubnetId: 
          Ref: PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PrivateRouteTable
      SubnetId: 
          Ref: PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PrivateRouteTable
      SubnetId: 
          Ref: PrivateSubnet2
#############################################################################################
### EC2 INSTANCES
#############################################################################################

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: 
        Ref: PublicSubnet1
      InstanceType:
        Ref: InstanceType
      # IamInstanceProfile:
      #   Ref: InstanceProfileDefault
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      KeyName: 
        Ref: KeyPairName
      ImageId: 
        Fn::FindInMap: 
          - 
            RegionMap
          - 
            Ref: "AWS::Region"
          - 
            AMI
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-UB1804-LINUX
      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          Fn::Sub:
            - |
              #!/bin/bash -xe
              exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                echo "Hello from user-data!"
                apt-get -y update
                apt-get install -y nginx
                apt-get install software-properties-common -y
                add-apt-repository universe -y
                add-apt-repository ppa:certbot/certbot -y
                apt-get update -y
                apt-get install certbot python-certbot-nginx -y
                curl http://169.254.169.254/latest/meta-data/public-ipv4 > /tmp/ip.txt
                curl https://${username}:${password}@dynupdate.no-ip.com/nic/update?hostname=${hostname}
                echo "Sleeping for 60 seconds for DNS TTL to expire"
                sleep 60
                certbot --nginx --non-interactive --agree-tos -m junk@arato.biz --domain ${hostname}
                mkdir /var/www/html/cert
                cp /etc/letsencrypt/live/${hostname}/*.pem /var/www/html/cert
                sed -e 's/\t/ /g' -e 's/^ *#.*//g' -e '/^$/d' -i /etc/nginx/sites-available/default
                sed -i 's/location/location \/cert\/ { autoindex on; }\n location/g' /etc/nginx/sites-available/default
                chmod 755 /var/www/html/cert
                chmod 644 /var/www/html/cert/*
                chown -R www-data /var/www/html/*
                systemctl restart nginx.service
            - 
              username: 
                Ref: Username
              password:
                Ref: Password
              hostname: 
                Ref: Hostname

  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: 
        Ref: VPC
      GroupDescription: "Enable SSH and HTTP access via port 22 and 80"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: InboundSourceNetAllowed1
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 
            Ref: InboundSourceNetAllowed2
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 
            Ref: InboundSourceNetAllowed1
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 
            Ref: InboundSourceNetAllowed2
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 
            Ref: InboundSourceNetAllowed1
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 
            Ref: InboundSourceNetAllowed2
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName}-SSH-HTTP-ICMP-SG

Outputs:
  PublicIP:
    Description: "AWS EC2 Instance Public IP Address"
    Value: 
      Fn::GetAtt:
        - EC2Instance
        - PublicIp
  PrivateIP:
    Description: "AWS EC2 Instance Private IP Address"
    Value: 
      Fn::GetAtt:
        - EC2Instance
        - PrivateIp


Description:
  S3 Demo Test

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names.
    Type: String
    Default: AACF-LAMBDA

  BucketName:
    Description: Default bucket for CFT (Lowercase only)
    Type: String
    Default: aacf-bucket

  KeyName:
    Description: Default bucket for CFT
    Type: String
    Default: index.html

  HtmlBody:
    Description: Default index.html content
    Type: String
    Default: "<html><header><title>This is title</title></header><body><H1>Hello World Updated!</H1></body></html>"

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName:
        Fn::Sub: ${BucketName}
      MetricsConfigurations: 
        - Id: EntireBucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
        RoutingRules:
        - RoutingRuleCondition:
            HttpErrorCodeReturnedEquals: '404'
            KeyPrefixEquals: out1/
          RedirectRule:
            HostName: www.sentinel.com
            ReplaceKeyPrefixWith: report-404/

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 
        Fn::Sub: ${EnvironmentName}_LambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: LogWriter
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: CFReader
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:DescribeStacks'
                Resource: '*'
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
    DependsOn:
      - S3Bucket

  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName:
        Fn::Sub: ${EnvironmentName}_LambdaFunction
      Handler: index.handler
      Role: 
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        ZipFile: >
          const response = require('cfn-response'); 
          const AWS = require('aws-sdk'); 
          const s3 = new AWS.S3() ; 
          exports.handler = function(event, context) {
            let key = event.ResourceProperties.Key.toLowerCase(); 
            let bucket = event.ResourceProperties.Bucket;
            let body = event.ResourceProperties.Body;
            let params = {};
            let responseData = {};
            responseData.Key = key;
            console.log("LAMBDA FUNCTION BUCKET:",bucket,"KEY:",key);
            (async function(){
              if (event.RequestType && event.RequestType == 'Create'){
                params.Bucket = bucket;
                params.Key = key ;
                params.ACL = 'public-read' ;
                params.ContentType = 'text/html';
                params.Body = body ;
                await s3.upload(params).promise();
                console.log("CREATE SUCCESS! BUCKET:",bucket,"KEY:",key);
                response.send(event, context, response.SUCCESS, responseData);
                return true;
              }
              else if (event.RequestType && event.RequestType == 'Delete'){
                params.Bucket = bucket;
                params.Key = key ;
                await s3.deleteObject(params).promise();
                console.log("DELETE SUCCESS! BUCKET:",bucket,"KEY:",key);
                response.send(event, context, response.SUCCESS, responseData);
                return true;
              }
              else if (event.RequestType && event.RequestType == 'Update'){
                params.Bucket = bucket;
                params.Key = key ;
                await s3.deleteObject(params).promise();
                params.ACL = 'public-read' ;
                params.ContentType = 'text/html';
                params.Body = body ;
                await s3.upload(params).promise();
                console.log("UPDATE SUCCESS! BUCKET:",bucket,"KEY:",key);
                response.send(event, context, response.SUCCESS, responseData);
                return true;
              }
              else{
                console.log("NO EVENT MATCHED! EVENT:",event.RequestType);
                response.send(event, context, response.SUCCESS, responseData);
                return true;
              }
            })().catch( err => console.log("LAMBDA EXECUTION ERROR", err));
          };
      Runtime: nodejs8.10
      Timeout: '10'
    DependsOn:
      - LambdaExecutionRole
  
  CustomFileUploader: 
    Type: "Custom::CustomFileUploader"
    Properties: 
      ServiceToken: 
        Fn::GetAtt: 
          - "LambdaFunction"
          - "Arn"
      Bucket: 
        Ref: S3Bucket
      Key:
        Ref: KeyName
      Body:
        Ref: HtmlBody
    DependsOn: 
      - LambdaFunction

Outputs:
  SecureURL:
    Value: 
      Fn::Sub: "https://${S3Bucket}.s3.amazonaws.com/index.html"
  WebsiteURL:
    Value: 
      Fn::GetAtt: 
        - S3Bucket
        - WebsiteURL
  LambdaOutput:
    Value: 
      Fn::GetAtt: 
        - CustomFileUploader
        - Key
  BucketId:
    Value: 
      Ref: S3Bucket



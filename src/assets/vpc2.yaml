Description:
  VPC Test

Parameters:

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: AA-TEST

  KeyPairName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: AA-TEST

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 172.30.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 172.30.11.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 172.30.12.0/24

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 172.30.21.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 172.30.22.0/24

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
    - t1.micro
    - t2.micro
    - m1.small

Mappings: 
 RegionMap: 
  "us-east-1": 
   AMI: "ami-0273df992a343e0d6"
  "us-east-2":
   AMI: "ami-033a0960d9d83ead0"
  "us-west-1":
   AMI: "ami-057a852b5ed4b66bc"
  "us-west-2":
   AMI: "ami-04ef7170e45541f07"

Resources:
#############################################################################################
### NETWORK
#############################################################################################
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 
          Ref: VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 
            Ref: EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 
            Ref: EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: 
          Ref: InternetGateway
      VpcId: 
        Ref: VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Public1-AZ1-SN

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Public2-AZ2-SN

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 0
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PrivateSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Private1-AZ1-SN

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: 
          Ref: VPC
      AvailabilityZone:
        Fn::Select:
          - 1
          - 
            Fn::GetAZs: ''
      CidrBlock: 
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Private2-AZ2-SN

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
          Ref: VPC
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Public-RT

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: 
          Ref: VPC
      Tags:
        - Key: Name
          Value: 
            Fn::Sub: ${EnvironmentName}-Private-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: 
          Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: 
          Ref: InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PublicRouteTable
      SubnetId: 
          Ref: PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PublicRouteTable
      SubnetId: 
          Ref: PublicSubnet2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PrivateRouteTable
      SubnetId: 
          Ref: PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: 
          Ref: PrivateRouteTable
      SubnetId: 
          Ref: PrivateSubnet2
#############################################################################################
### EC2 INSTANCES
#############################################################################################
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId:
        Ref: VPC
      GroupDescription: "Enable SSH and HTTP access via port 22 and 80"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName}-SSH-HTTP-SG

  Bastion1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: 
        Fn::FindInMap:
          - "RegionMap"
          - 
            Ref: "AWS::Region"
          - "AMI"
      SubnetId:
        Ref: PublicSubnet1
      InstanceType:
        Ref: InstanceType
      SecurityGroupIds:
        - Ref: InstanceSecurityGroup
      KeyName:
        Ref: KeyPairName
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${EnvironmentName}-UB-Bastion1-EC2
      UserData:
        Fn::Base64:                                # YAML makes userdata much cleaner
          Fn::Sub: |
              #!/bin/bash -ex
              sudo touch /tmp/123
              curl http://aarato73:Cisco123@dynupdate.no-ip.com/nic/update?hostname=rvous.ddns.net
              sudo apt-get install -y nginx

Outputs:
  PublicIp:
    Description: VPC
    Value:
      Ref: VPC
    Export:
      Name: VPC

